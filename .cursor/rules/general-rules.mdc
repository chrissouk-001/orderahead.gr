---
description: 
globs: 
alwaysApply: true
---
# Best Practices for Using Cursor AI with Django/Python and JavaScript Stack

## Project Setup

### Directory Structure
- Use Cursor AI to generate a standard Django project structure
- Keep frontend JavaScript/CSS in a dedicated `/static` directory
- Structure frontend code with component-based organization
- Use templates folder with proper inheritance hierarchy

### Configuration Management
- Set up separate settings files for development, testing, and production
- Use Cursor AI to generate environment-specific configurations
- Store sensitive information in environment variables, not in code
- Have Cursor generate a sample `.env` file with placeholder values

## Django/Python Development

### Model Design
- Ask Cursor AI to design normalized models with proper relationships
- Use Cursor to generate model validation methods
- Request complete model serializers for REST APIs
- Have Cursor implement proper model inheritance when needed

### View Implementation
- Use Cursor to implement class-based views over function-based views
- Ask for Django REST Framework viewsets for API endpoints
- Request proper permission classes and authentication systems
- Use Cursor to generate proper URL routing patterns

### Testing
- Have Cursor generate comprehensive test cases for models and views
- Request fixtures for test data
- Use Cursor to implement test factories with Factory Boy
- Ask for test coverage reports and integration with CI/CD

## JavaScript Development

### Framework Integration
- Use Cursor to integrate modern JS tools with Django (webpack, babel, etc.)
- Request proper CSRF token handling with AJAX requests
- Ask for proper frontend state management patterns
- Have Cursor generate JS utility functions for common Django interactions

### Component Development
- Request modular, reusable component patterns
- Use Cursor to implement proper event handling
- Ask for responsive design implementations with CSS
- Request proper DOM manipulation patterns

## CSS Organization

### Styling Best Practices
- Use Cursor to implement SCSS/SASS with Django
- Request BEM or similar CSS methodology implementation
- Ask for responsive design with proper breakpoints
- Have Cursor generate a coherent color scheme and design system

## Security Considerations

### Django Security
- Use Cursor to implement proper XSS protection
- Request CSRF protection implementation
- Ask for proper authentication flows
- Have Cursor generate secure password handling and user registration

### Frontend Security
- Request secure local storage usage
- Ask for proper input sanitization
- Use Cursor to implement secure API communication patterns
- Request proper error handling that doesn't expose sensitive information

## Performance Optimization

### Backend Performance
- Ask Cursor for database query optimization
- Request caching strategy implementation
- Use Cursor to implement asynchronous tasks with Celery
- Request database indexing recommendations

### Frontend Performance
- Ask for code splitting and lazy loading patterns
- Request JS bundle optimization strategies
- Use Cursor to implement efficient state management
- Request image optimization strategies

## Deployment Pipeline

### CI/CD Setup
- Use Cursor to generate GitHub Actions or similar CI/CD workflows
- Request Docker configuration files
- Ask for proper environment variable management in deployment
- Use Cursor to generate deployment checklists

## AI Prompting Strategies

### Effective Prompts for Cursor AI
- Be specific about Django version and other dependencies
- Include context about models when requesting views or serializers
- Use complete sentences with detailed requirements
- Provide examples of existing code patterns you want to follow

### Cursor AI Limitations
- Verify generated ORM queries for efficiency
- Double-check security implementations
- Review complex algorithms and business logic
- Manually test all generated code

## Collaborative Development

### Version Control
- Use Cursor to generate meaningful commit messages
- Ask for proper branching strategy recommendations
- Request proper merge conflict resolution
- Use Cursor to implement Git hooks for code quality

### Code Review
- Ask Cursor to review your code for best practices
- Request automated linting and formatting configurations
- Use Cursor to implement coding standards documentation
- Request proper documentation generation

## Documentation

### Code Documentation
- Ask Cursor to generate comprehensive docstrings
- Request README files with setup instructions
- Use Cursor to document API endpoints
- Request user documentation for frontend features

### Project Documentation
- Ask Cursor to generate architecture diagrams
- Request data flow documentation
- Use Cursor to create development environment setup guides
- Request deployment documentation

## Maintenance Strategies

### Refactoring
- Use Cursor to identify code smells and refactoring opportunities
- Request database migration strategies
- Ask for deprecation strategies for legacy features
- Use Cursor to suggest technical debt reduction approaches

### Debugging
- Request logging implementation strategies
- Ask for debugging tool configurations
- Use Cursor to generate common debugging patterns
- Request error tracking integration